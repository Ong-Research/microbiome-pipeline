

# This file should contain everything to configure the workflow on 
# a global scale. In case of sample based data, it should be complemented by 
# a samples.tsv file that contains one row per sample.

## files to set in advance
samples_file: "samples.tsv"
metadata_file: "output/init/metadata.qs"
negcontrol_file: "output/init/negcontrols.qs"

# general parameters for run
asv_prefix: "asv"
threads: 32

# dada2 filter and trim
filter_and_trim:
  "dust2m_dec2018_C75PR":
    truncQ: 2
    truncLen: [280, 250]
    trimLeft: 0
    trimRight: 0
    maxLen: Inf
    minLen: 250
    maxN: 0
    minQ: 0
    maxEE: 2
  "dust2m_dec2018_C76L2":
    truncQ: 2
    truncLen: [280, 250]
    trimLeft: 0
    trimRight: 0
    maxLen: Inf
    minLen: 250
    maxN: 0
    minQ: 0
    maxEE: 2    
  "dust2m_dec2019":
    truncQ: 2
    truncLen: [280, 250]
    trimLeft: 0
    trimRight: 0
    maxLen: Inf
    minLen: 250
    maxN: 0
    minQ: 0
    maxEE: 2
  "dust2m_jun2021":
    truncQ: 2
    truncLen: [280, 250]
    trimLeft: 0
    trimRight: 0
    maxLen: Inf
    minLen: 250
    maxN: 0
    minQ: 0
    maxEE: 2    
  "dust9m_apr2023_KYWK8":
    truncQ: 2
    truncLen: [280, 250]
    trimLeft: 0
    trimRight: 0
    maxLen: Inf
    minLen: 250
    maxN: 0
    minQ: 0
    maxEE: 2
  "dust9m_apr2023_KYWKG":
    truncQ: 2
    truncLen: [280, 250]
    trimLeft: 0
    trimRight: 0
    maxLen: Inf
    minLen: 250
    maxN: 0
    minQ: 0
    maxEE: 2
  "dust9m_apr2023_L2BLJ":
    truncQ: 2
    truncLen: [280, 250]
    trimLeft: 0
    trimRight: 0
    maxLen: Inf
    minLen: 250
    maxN: 0
    minQ: 0
    maxEE: 2

# dada2 learn error rates
error_rates:
  "dust2m_dec2018_C75PR":
    learn_nbases: 100e6
  "dust2m_dec2018_C76L2":
    learn_nbases: 100e6
  "dust2m_dec2019":
    learn_nbases: 100e6
  "dust2m_jun2021":
    learn_nbases: 100e6
  "dust9m_apr2023_KYWK8":
    learn_nbases: 100e6
  "dust9m_apr2023_KYWKG":
    learn_nbases: 100e6
  "dust9m_apr2023_L2BLJ":
    learn_nbases: 100e6

# dada2 merge pairs
merge_pairs:
  "dust2m_dec2018_C75PR":
    minOverlap: 70
    maxMismatch: 0
  "dust2m_dec2018_C76L2":
    minOverlap: 70
    maxMismatch: 0
  "dust2m_dec2019":
    minOverlap: 70
    maxMismatch: 0
  "dust2m_jun2021":
    minOverlap: 70
    maxMismatch: 0    
  "dust9m_apr2023_KYWK8":
    minOverlap: 70
    maxMismatch: 0
  "dust9m_apr2023_KYWKG":
    minOverlap: 70
    maxMismatch: 0
  "dust9m_apr2023_L2BLJ":
    minOverlap: 70
    maxMismatch: 0

# dada2 remove chimeras
remove_chimeras:
  minSampleFraction: 0.9
  ignoreNNegatives: 1
  minFoldParentOverAbundance: 1.5
  allowOneOf: FALSE
  minOneOffParentDistance: 4
  maxShift: 16
  chimera_method: "consensus"    
   

# qc parameters
# negctrl_prop: proportion of negative control reads to be subtracted from sample reads vectors
# max_length_variation: bps can a sequence be longer or shorter than the mode sequence length
# low_abundance_perc: min percentage of total_reads in an ASV
qc_parameters:
  negctrl_prop: 0.5
  max_length_variation: 50
  low_abundance_perc: 0.0001 

# downloaded from https://benlangmead.github.io/aws-indexes/k2
# the first three contain only bacteria, the last one contains viral, human, archea too
kraken_dbs:
  {
    greengenes: "data/kraken_dbs/16S_Greengenes_k2db",
    silva132: "data/kraken_dbs/16S_SILVA132_k2db",
    silva138: "data/kraken_dbs/16S_SILVA138_k2db",
    rdp: "data/kraken_dbs/16S_RDP_k2db",
    k2_std: "data/kraken_dbs/k2_standard",
  }

# According to this issue:
# https://github.com/DerrickWood/kraken2/issues/167  
# For general purposes, 0.05 or 0.1 for general purposes.
# If the classification of ASVs / OTUs of reads < 10 is important, then use
# something higher, e.g. 0.5 
# more details: https://github.com/DerrickWood/kraken2/wiki/Manual#output-formats
kraken_confidence: 0.01
kraken_db_merge: ["k2_std", "greengenes", "silva132"]
kraken_blast_min_perc: 0.9

blast:
  perc: 0.3
  dbs: ["16S_ribosomal_RNA"] #, "ref_prok_rep_genomes"]
  format: "'6 qseqid sseqid evalue bitscore score mismatch positive stitle qframe sframe length pident'"
  # format: "'6 qseqid sseqid evalue bitscore score mismatch positive stitle pident length'"



# beta_div
# any of c("bray", "fjaccard", "euclidean",
  # "hellinger", "mahalanobis", "manhattan", "bhjattacharyya", "canberra",
  # "chord", "unifrac", "w_unifrac", "w_unifrac_norm")
# beta:
#   comps: 20
#   beta_div: ["bray", "fjaccard", "unifrac", "w_unifrac"]
#   beta_group: ["all"]
